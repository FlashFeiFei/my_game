// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package room

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RoomGrpcClient is the client API for RoomGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoomGrpcClient interface {
	//房间的流请求
	Room(ctx context.Context, opts ...grpc.CallOption) (RoomGrpc_RoomClient, error)
}

type roomGrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewRoomGrpcClient(cc grpc.ClientConnInterface) RoomGrpcClient {
	return &roomGrpcClient{cc}
}

func (c *roomGrpcClient) Room(ctx context.Context, opts ...grpc.CallOption) (RoomGrpc_RoomClient, error) {
	stream, err := c.cc.NewStream(ctx, &RoomGrpc_ServiceDesc.Streams[0], "/my_game.protoc.room.RoomGrpc/Room", opts...)
	if err != nil {
		return nil, err
	}
	x := &roomGrpcRoomClient{stream}
	return x, nil
}

type RoomGrpc_RoomClient interface {
	Send(*RoomStreamRequest) error
	Recv() (*RoomStreamResponse, error)
	grpc.ClientStream
}

type roomGrpcRoomClient struct {
	grpc.ClientStream
}

func (x *roomGrpcRoomClient) Send(m *RoomStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *roomGrpcRoomClient) Recv() (*RoomStreamResponse, error) {
	m := new(RoomStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RoomGrpcServer is the server API for RoomGrpc service.
// All implementations must embed UnimplementedRoomGrpcServer
// for forward compatibility
type RoomGrpcServer interface {
	//房间的流请求
	Room(RoomGrpc_RoomServer) error
	mustEmbedUnimplementedRoomGrpcServer()
}

// UnimplementedRoomGrpcServer must be embedded to have forward compatible implementations.
type UnimplementedRoomGrpcServer struct {
}

func (UnimplementedRoomGrpcServer) Room(RoomGrpc_RoomServer) error {
	return status.Errorf(codes.Unimplemented, "method Room not implemented")
}
func (UnimplementedRoomGrpcServer) mustEmbedUnimplementedRoomGrpcServer() {}

// UnsafeRoomGrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoomGrpcServer will
// result in compilation errors.
type UnsafeRoomGrpcServer interface {
	mustEmbedUnimplementedRoomGrpcServer()
}

func RegisterRoomGrpcServer(s grpc.ServiceRegistrar, srv RoomGrpcServer) {
	s.RegisterService(&RoomGrpc_ServiceDesc, srv)
}

func _RoomGrpc_Room_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RoomGrpcServer).Room(&roomGrpcRoomServer{stream})
}

type RoomGrpc_RoomServer interface {
	Send(*RoomStreamResponse) error
	Recv() (*RoomStreamRequest, error)
	grpc.ServerStream
}

type roomGrpcRoomServer struct {
	grpc.ServerStream
}

func (x *roomGrpcRoomServer) Send(m *RoomStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *roomGrpcRoomServer) Recv() (*RoomStreamRequest, error) {
	m := new(RoomStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RoomGrpc_ServiceDesc is the grpc.ServiceDesc for RoomGrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoomGrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "my_game.protoc.room.RoomGrpc",
	HandlerType: (*RoomGrpcServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Room",
			Handler:       _RoomGrpc_Room_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "room.proto",
}
